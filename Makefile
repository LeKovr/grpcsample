# application project makefile

SHELL          = /bin/bash
CFG           ?= .env
PRG           ?= $(shell basename $$PWD)

# -----------------------------------------------------------------------------
# Runtime data

APP_LISTEN    ?=

PGHOST        ?= localhost
PGPORT        ?= 5432
PGDATABASE    ?= $(PRG)
PGUSER        ?= ma
PGPASSWORD    ?= $(shell < /dev/urandom tr -dc A-Za-z0-9 | head -c14; echo)
PGAPPNAME     ?= $(PRG)

# Block based on https://gitlab.com/pantomath-io/demo-grpc/blob/init-makefile/Makefile

API        := grpccompanyserv
API_SRC    := api.proto
API_OUT    := ./${API}/api.pb.go
SERVER_OUT := server.bin
CLIENT_OUT := client.bin

PKG := ./cmd
SERVER_PKG_BUILD := "${PKG}/server"
CLIENT_PKG_BUILD := "${PKG}/client"

# dcape containers name prefix
DCAPE_PROJECT_NAME ?= dcape
# dcape postgresql container name
DCAPE_DB           ?= $(DCAPE_PROJECT_NAME)_db_1


define CONFIG_DEFAULT
# ------------------------------------------------------------------------------
# application config file, generated by make $(CFG)

APP_LISTEN=$(APP_LISTEN)

# Database

# Host
PGHOST=$(PGHOST)
# Port
PGPORT=$(PGPORT)
# Name
PGDATABASE=$(PGDATABASE)
# User
PGUSER=$(PGUSER)
# Password
PGPASSWORD=$(PGPASSWORD)
# App name
PGAPPNAME=$(PGAPPNAME)

endef
export CONFIG_DEFAULT

# ------------------------------------------------------------------------------

-include $(CFG)
export

.PHONY: all api build_server build_client

all: build_server build_client

$(API_OUT): $(API_SRC)
	@protoc --go_out=plugins=grpc:${API} \
	$(API_SRC)

api: $(API_OUT) ## Auto-generate grpc go sources

dep: ## Get the dependencies
	@go get -v -d ./...

build_server: dep api ## Build the binary file for server
	@go build -i -v -o $(SERVER_OUT) $(SERVER_PKG_BUILD)

build_client: dep api ## Build the binary file for client
	@go build -i -v -o $(CLIENT_OUT) $(CLIENT_PKG_BUILD)

run: build_server
	./$(SERVER_OUT) --debug \
	PGHOST=${PGHOST} \
	--db.name=${PGDATABASE} --db.user=${PGUSER} --db.password=${PGPASSWORD}

lint: ## run linter
	@golangci-lint run ./...


# ------------------------------------------------------------------------------
# DB operations (with docker)


# Wait for postgresql container start
docker-wait:
	@echo -n "Checking PG is ready..."
	@until [[ `docker inspect -f "{{.State.Health.Status}}" $$DCAPE_DB` == healthy ]] ; do sleep 1 ; echo -n "." ; done
	@echo "Ok"

# create user, db and load dump
db-create: docker-wait
	@echo "*** $@ ***" ; \
	docker exec -i $$DCAPE_DB psql -U postgres -c "CREATE USER \"$$PGUSER\" WITH PASSWORD '$$PGPASSWORD';" || true ; \
	docker exec -i $$DCAPE_DB psql -U postgres -c "CREATE DATABASE \"$$PGDATABASE\" OWNER \"$$PGUSER\";" || db_exists=1 ; \
	if [[ ! "$$db_exists" ]] ; then \
	    cat companyserv.sql | docker exec -i $$DCAPE_DB psql -U postgres -d $$PGDATABASE -1 -X ; \
	    echo "Restore completed" ; \
	fi

## drop database and user
db-drop: docker-wait
	@echo "*** $@ ***"
	@docker exec -it $$DCAPE_DB psql -U postgres -c "DROP DATABASE \"$$PGDATABASE\";" || true
	@docker exec -it $$DCAPE_DB psql -U postgres -c "DROP USER \"$$PGUSER\";" || true

psql: docker-wait
	@docker exec -it $$DCAPE_DB psql -U $$PGUSER -d $$PGDATABASE

psql-local: docker-wait
	@psql -d "postgres://$$PGUSER:$$PGPASSWORD@/$$PGDATABASE?sslmode=disable"

# временно добавлен для проверки применимости
xo:
	xo "pgsql://$$PGUSER:$$PGPASSWORD@$$PGHOST/$$PGDATABASE?sslmode=disable" -o models

# ------------------------------------------------------------------------------

## create initial config
$(CFG):
	@[ -f $@ ] || { echo "$$CONFIG_DEFAULT" > $@ ; echo "Warning: Created default $@" ; }

clean: ## Remove previous builds
	@rm $(SERVER_OUT) $(CLIENT_OUT) $(API_OUT)

help: ## Display this help screen
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
